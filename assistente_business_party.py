# -*- coding: utf-8 -*-
"""Assistente Business Party.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ni67uunyseiId_AYGvnR2M--wfsPHzE_
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informação mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando é a próxima imersão de IA ###############################################
resposta = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a próxima Imersão IA com Google Gemini da Alura?',
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Pergunta ao Gemini uma informação utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a próxima Imersão IA com Google Gemini da Alura?',
    # Insere a tool de busca do Google ###############################################
    config={"tools":[{"google_search": {}}]}
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"Páginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##################################
# --- Agente 1: Brainstormer --- #
##################################
def agente_brainstormer(briefing):
    brainstormer = Agent(
        name="agente_brainstormer",
        model="gemini-2.0-flash",
        # Instruções do Agente de Brainstorming #################################################
        instruction="""
          Haja como um time de brainstorming composto por diferentes perfis (O Pensador Criativo,
          O Analista, O Executor, O Entusiasta, O Cético Construtivo, O Especialista). Você deve levantar ideias
          de ações com base no briefing fornecido. O evento pode ser desde uma festa onde cada funcionário
          pode trazer um item até uma festa épica em uma supercasa de eventos. Pode ter decorações temáticas,
          convites especiais, impressos, banners, espaços instagramáveis, materiais de divulgação etc.,
          desde que se adeque ao orçamento e requisitos fornecidos.  Você pode utilizar a ferramenta do Google (google_search)
          para buscar informações sobre o tema pesquisar ideias, locais, fornecedores, brindes, materiais etc.
          Ao final elenque as 5 melhores e mais criativas ideias de festa que podem servir ao tema proposto no briefing. Inclua o
          slogan, as possíveis ações e atrações, ideias de materiais, brindes, peças de comunicação, decorações, alimentação etc.).
        """,
      description="Agente de brainstorming que gera ideias iniciais de eventos.",
      tools=[google_search]
    )
    entrada_do_agente_brainstorming = f"Briefing:{briefing}"
    lista_de_ideias = call_agent(brainstormer, entrada_do_agente_brainstorming)
    return lista_de_ideias

###########################################
# --- Agente 2: Planejador de eventos --- #
###########################################
def agente_planejador(briefing, lista_de_ideias, data_de_hoje):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instruções do Agente Planejador #################################################
        instruction="""
          Você é um especialista em eventos dentro do time de comunicação interna e endomarketing da PaperCare.
          Seu objetivo é analisar as ideias iniciais levantadas na etapa de brainstorming e organizar o evento: criar a programação,
          levantar as peças de comunicação necessárias, levantar custos e elaborar o cronograma de execução (compra de itens,
          produção das peças de comunicação, minuto a minuto do evento etc.). Você pode mesclar itens de duas ou mais ideias no
          planejamento do evento. Lembre-se de considerar a data de hoje e a data do evento no planejamento. Utilize a pesquisa do
          Google (google_search) para buscar informações complementares para refinar o planejamento. Você pode contar com os canais
          de comunicação da empresa (e-mail, murais de avisos, fundo de telas, intranet e TVs) e com o time de comunicação que conta
          com pessoas que podem apoiar com desenvolvimento das artes. Ao final, gere uma apresentação com a proposta do evento. Essa apresentação
          deverá conter um resumo sobre o evento, trazer o tema e slogan, programação do evento, plano de comunicação, plano de execução
          e custos(importante especificar os nomes dos itens, quantidades, valores unitários e valores totais). Essa apresentação servirá para aprovação do evento pela gestão da empresa e será utilizada como base para criação dos
          textos e peças de comunicação pelo time de comunicação.
        """,
        description="Agente que planeja os eventos",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Briefing:{briefing}\nLista de Ideias: {lista_de_ideias}\nData de início do Planejamento:{data_de_hoje}"
    # Executa o agente
    plano_do_evento = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_evento

#################################
# --- Agente 3: Comunicação --- #
#################################
def agente_comunicador(briefing, plano_do_evento):
    comunicador = Agent(
        name="agente_comunicador",
        model="gemini-2.0-flash",
        instruction="""
            Você é um especialista de comunicação da PaperCare. Sua função é elaborar os textos
            para as peças de comunicação propostas no plano do evento. As comunicações devem ser integradas
            entre si e com o core da empresa. Os textos devem levar em consideração as especificações
            fornecidas pelo briefing e plano no evento.
            Os textos devem ser de leitura rápida, engajadores, informativo, com linguagem simples e incluir 3 a 5 hashtags no final.
            Todos os materiais, preferencialmente, devem ter o mesmo título e slogan para reforçar o propósito do evento e comunicação.
            """,
        description="Agente criador dos textos das comunicações do evento."
    )
    entrada_do_agente_comunicador = f"Briefing:{briefing}\nPlano do Evento: {plano_do_evento}"
    # Executa o agente
    draft_comunicacao = call_agent(comunicador, entrada_do_agente_comunicador)
    return draft_comunicacao

#######################################
# --- Agente 4: Revisor do Evento --- #
#######################################
def agente_revisor(briefing, plano_do_evento,draft_comunicacao):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
            Você é o gestor e especialista em comunicação, endomarketing e experiencia do colaborador
            da PaperCare. Sua função é revisar os drafts das comunicações e verificar se as comunicações
            estão alinhadas com o Briefing e Plano do Evento. Caso haja melhorias, sugira alterações.
            Caso esteja tudo certo, sinalize apenas com “Aprovado! Podem seguir.”
            """,
        description="Agente revisor da comunicação do evento."
    )
    entrada_do_agente_revisor = f"Briefing:{briefing}\nPlano do Evento: {plano_do_evento}\nDraft da Comunicação: {draft_comunicacao}"
    # Executa o agente
    comunicacao_revisada = call_agent(revisor, entrada_do_agente_revisor)
    return comunicacao_revisada

#######################################
# --- Formulário de Briefing --- #
#######################################

def coletar_briefing():
    #Coleta informações do briefing do evento corporativo através de inputs validados.

    briefing = {}

    # Tipo de evento
    while True:
        tipo_evento = input("Qual o tipo de evento (Festa de final de ano, convenção, aniversário da empresa, campanha etc.)? ").strip()
        if tipo_evento:
            briefing['tipo_evento'] = tipo_evento
            break
        else:
            print("Por favor, informe o tipo de evento.")

    # Tema
    briefing['tema'] = input("Qual é o tema? ").strip()

    # Data/período do evento
    while True:
        data_periodo = input("Data/período do evento? ").strip()
        if data_periodo:
            briefing['data_periodo'] = data_periodo
            break
        else:
            print("Por favor, informe a data ou período do evento.")

    # Horário
    while True:
        horario = input("Horário? ").strip()
        if horario:
            briefing['horario'] = horario
            break
        else:
            print("Por favor, informe o horário do evento.")

    # Público do evento - Número de pessoas
    while True:
        try:
            num_pessoas = int(input("Público do evento: Número de pessoas? "))
            if num_pessoas > 0:
                briefing['num_pessoas'] = num_pessoas
                break
            else:
                print("Por favor, informe um número de pessoas válido.")
        except ValueError:
            print("Por favor, insira um número inteiro para a quantidade de pessoas.")

    # Público do evento - Perfil/público-alvo
    briefing['perfil_publico'] = input("Público do evento: Perfil/público-alvo (%mulheres x homens, faixa de idade, alta gestão, toda companhia, pessoal do escritório etc.)? ").strip()

    # Orçamento previsto
    while True:
        try:
            orcamento = float(input("Orçamento previsto em Reais (R$)? "))
            if orcamento >= 0:
                briefing['orcamento'] = orcamento
                break
            else:
                print("Por favor, informe um orçamento válido em reais (R$).")
        except ValueError:
            print("Por favor, insira um valor numérico para o orçamento.")

    # O que precisa ter
    briefing['precisa_ter'] = input("O que precisa ter? ").strip()

    # Restrições
    briefing['restricoes'] = input("Restrições: ").strip()

    # Informações complementares
    info_complementares = """
    · A PaperCare é uma empresa fabricante de papel (consumo, profissional e industrial) e produtos de cuidados pessoais (absorventes e fraldas).
    · Tem cerca de 1200 funcionários distribuídos em 2 plantas fabris (com 870 e 215 funcionários), 1 escritório (85 funcionários) e time comercial (30 funcionários). A empresa tem 57 anos de existência e tem como lema “Nosso papel é construir o futuro”.
    · Perfil do publico: 72% masculino; 28% feminino; 5% LGBTQIAP+; 80% do time das fábricas é operacional.
    · As áreas fabris funcionam 24 horas por dia. Os operadores estão divididos em 4 equipes que rodam turnos de 8 horas. A cada 5 dias essas equipes fazem um rodízio de turno, sendo que uma das equipes fica de folga.
    · O escritório, áreas administrativas e time comercial trabalham em horário comercial. Os times comerciais atuam fora do escritório.
    · Considere que o time de Comunicação e Endomarleting é reduzido para produzir e executar o evento. Composição: 3 integrantes no escritório central + 1 apoio em cada fabrica.
    """

    # Formatar a saída como um texto, incluindo as informações complementares
    texto_briefing = f"""
    Briefing do Evento:

    Tipo de Evento: {briefing['tipo_evento']}
    Tema: {briefing['tema']}
    Data/Período: {briefing['data_periodo']}
    Horário: {briefing['horario']}
    Público - Número de Pessoas: {briefing['num_pessoas']}
    Público - Perfil: {briefing['perfil_publico']}
    Orçamento Previsto(R$): {briefing['orcamento']}
    Precisa Ter: {briefing['precisa_ter']}
    Restrições: {briefing['restricoes']}

    Informações complementares:{info_complementares}
    """

    return texto_briefing

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("ASSISTENTE BUSINESS PARTY")
print("Olá sou seu assistente personalizado da PaperCare e estou aqui para auxiliá-lo a produzir os eventos da companhia.")

# Inserir lógica do sistema de agentes ################################################

# --- Obter o Briefing do Usuário ---
print("Vamos a primeira etapa. O Briefing:")
briefing = coletar_briefing()

# --- Resumo do Briefing ---
print("\n--- Resumo do Briefing ---\n")
display(to_markdown(briefing))
print("----------------------------------------------------------------")

# --- Etapa de Brainstorming ---
lista_de_ideias = agente_brainstormer(briefing)
print("\n--- Resultado da Etapa de Brainstorming ---\n")
display(to_markdown(lista_de_ideias))
print("----------------------------------------------------------------")

# --- Etapa de Planejamento ---
plano_do_evento = agente_planejador(briefing, lista_de_ideias, data_de_hoje)
print("\n--- Resultado da Etapa de Planejamento ---\n")
display(to_markdown(plano_do_evento))
print("----------------------------------------------------------------")

# --- Etapa de Criação da Comunicação ---
draft_comunicacao = agente_comunicador(briefing, plano_do_evento)
print("\n--- Resultado da Etapa de Criação da Comunicação ---\n")
display(to_markdown(draft_comunicacao))
print("----------------------------------------------------------------")

# --- Etapa de Revisão da Comunicação ---
comunicacao_revisada = agente_revisor(briefing, plano_do_evento,draft_comunicacao)
print("\n--- Resultado da Etapa de Revisão da Comunicação ---\n")
display(to_markdown(comunicacao_revisada))
print("----------------------------------------------------------------")
print(f"ASSISTENTE BUSINESS PARTY - IROTSUKA - {data_de_hoje}")
print(f"####################################################")
print(f"#  LINKEDIN:https://www.linkedin.com/in/irotsuka/  #")
print(f"#  GITHUB: https://github.com/i-otsuka             #")
print(f"####################################################")